package Extensions

import Core.extensions.listWith
import Core.interfaces.DBEntity
import java.sql.ResultSet
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.createInstance
import kotlin.reflect.full.memberProperties

/**
 * Created by Sanf0rd on 16/07/17.
 */
fun ResultSet.asListOf(entity: DBEntity): List<DBEntity> {
    val resultList: MutableList<DBEntity> = mutableListOf()

    //while (resultSet.next()) {

    var newInstance = this.javaClass.kotlin.createInstance()
    var newInstanceKClass = newInstance.javaClass.kotlin

    val fields = this.javaClass.declaredFields + this.javaClass.superclass.declaredFields

    for (field in fields) {
        val kProperty = newInstanceKClass.memberProperties. find { it.name == field.name }

        if (field.isIgnore().not() && field.isAutoGeneratedMetaData().not()) {

            @Suppress("IMPLICIT_CAST_TO_ANY")
            var value = when(field.genericType) {
                String::class.java  -> this.getString(field.name)
                Int::class.java     -> this.getInt(field.name)
                Double::class.java  -> this.getDouble(field.name)
                Float::class.java   -> this.getFloat(field.name)
                Long::class.java    -> this.getLong(field.name)
                Char::class.java    -> this.getString(field.name)
                Boolean::class.java -> if (this.getInt(field.name) == 0) true else false
                else                -> print("Unsuported type")
            }

            if (kProperty is KMutableProperty<*>) {
                kProperty.setter.call(newInstance, value)
            }


        }
    }
    //resultList.add(D)
    //}

    return resultList
}
package Extensions

import java.lang.reflect.Field
import Annotation.*
import java.lang.reflect.Type

/**
 * Created by sanf0rd on 10/07/17.
 */
fun Field.isIgnore(): Boolean {
    return getAnnotation(Ignore::class.java) != null
}

fun Field.isAutoGeneratedMetaData(): Boolean {
    return name.contains("$") || name.isEqual("serialVersionUID")
}

fun Field.isNotNul(): Boolean {
    return getAnnotation(NotNull::class.java) != null
}

fun Field.isUnique(): Boolean {
    return getAnnotation(Unique::class.java) != null
}

fun Field.isPrimaryKey(): Boolean {
    return getAnnotation(PrimaryKey::class.java) != null
}

fun Field.isAutoIncrement(): Boolean {
    return getAnnotation(AutoIncrement::class.java) != null
}

val Type.sql: String
    get() {
        return when (this) {
            Int::class.java, Integer::class.java, Boolean::class.java -> "INTEGER"
            Long::class.java -> "BIGINT"
            Double::class.java, Float::class.java -> "DOUBLE"
            else -> "TEXT"
        }
    }


val Field.sql: String
    get() {
        val autoIncrementSql = if (isAutoIncrement()) "AUTOINCREMENT" else String.EMPTY
        val primaryKeySql = if (isPrimaryKey()) "PRIMARY KEY" else String.EMPTY
        var notNullSql = if (isNotNul()) "NOT NULL" else String.EMPTY
        var uniqueSql = if (isUnique()) "UNIQUE" else String.EMPTY


        return "${name} ${genericType.sql} ${primaryKeySql} " +
                "${autoIncrementSql} ${notNullSql} ${uniqueSql}"
    }
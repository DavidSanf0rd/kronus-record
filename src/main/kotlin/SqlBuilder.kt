import Extensions.isAutoGeneratedMetaData
import Extensions.isAutoIncrement
import Extensions.isIgnore
import Extensions.sql

/**
 * Created by sanf0rd on 10/07/17.
 */
class SqlBuilder {
    companion object {
        fun create(clazz: Any): String {
            if (clazz.javaClass.declaredFields.isEmpty()) {
                return "Class without field is not allowed."
            }

            val queryBuilder = StringBuilder()
            queryBuilder.append("CREATE TABLE IF NOT EXISTS ${clazz.javaClass.simpleName}(")

            val fields = clazz.javaClass.declaredFields + clazz.javaClass.superclass.declaredFields

            var isFirst = true
            for (field in fields) {
                if (field.isIgnore().not() && field.isAutoGeneratedMetaData().not()) {
                    if (isFirst.not())
                        queryBuilder.append(", ")

                    val fieldPart = field.sql
                    queryBuilder.append(fieldPart.trim())

                    isFirst = false
                }
            }
            queryBuilder.append(");")
            return queryBuilder.toString()
        }

        fun insert(clazz: Any): String {
            val objectAsJson = objectAsJson(clazz)
            val queryBuilder = StringBuilder()
            queryBuilder.append("INSERT INTO ${clazz.javaClass.simpleName}")

            val keyBuilder = StringBuilder("(")
            val valueBuilder = StringBuilder(" VALUES(")

            val fields = clazz.javaClass.declaredFields + clazz.javaClass.superclass.declaredFields

            var isFirst = true
            for (field in fields) {
                if (field.isIgnore().not() && field.isAutoGeneratedMetaData().not()) {
                    if (field.isAutoIncrement())
                        continue

                    if (isFirst.not()) {
                        keyBuilder.append(",")
                        valueBuilder.append(",")
                    }

                    keyBuilder.append(field.name)
                    if (objectAsJson.get(field.name).isString)
                        valueBuilder.append("'${objectAsJson.getString(field.name, "")}'")
                    else if (objectAsJson.get(field.name).isBoolean) {
                        if (objectAsJson.getBoolean(field.name, false))
                            valueBuilder.append("1")
                        else valueBuilder.append("0")
                    } else valueBuilder.append(objectAsJson.get(field.name))

                    isFirst = false
                }
            }

            keyBuilder.append(")")
            valueBuilder.append(")")

            queryBuilder.append(keyBuilder)
            queryBuilder.append(valueBuilder)
            queryBuilder.append(";")

            //log(this.javaClass.simpleName, queryBuilder.toString())
            return queryBuilder.toString()
        }
    }
}